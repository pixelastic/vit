#!/usr/bin/env ruby
require_relative '../lib/git_helper'
# Squash all commit of current branch into one
# Usage :
# $ git-branch-squash develop
# $ git-branch-switch d
class GitBranchSquash
  include GitHelper

  def initialize(*args)
    args = replace_short_aliases(args)
    @starting_point = starting_point(args[0])
    if @starting_point.nil?
      puts 'You must specify the branch starting point'
      puts 'Usage:'
      puts '$ git-branch-squash develop'
      exit 1
    end
  end

  # When given a branch, will find the closer between the remote and local one
  def starting_point(commit)
    # This is not a known local branch, we use it directly
    return commit unless branch?(commit)

    remote_branch = "#{current_remote}/#{commit}"
    closer_commit(commit, remote_branch)
  end

  def run
    branch_origin = `git merge-base --fork-point #{@starting_point}`.strip
    commit_messages = `git log --format=%B --reverse #{branch_origin}...`
    commit_messages = commit_messages.gsub("'", "'\"'\"'")
    system("git reset --soft #{branch_origin} && git commit --edit -m'#{commit_messages}'")
  end
end
GitBranchSquash.new(*ARGV).run
