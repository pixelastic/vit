#!/usr/bin/env ruby
require_relative '../lib/git_helper'
require 'awesome_print'

# Branch representation
class Branch
  include GitHelper
  def initialize(data)
    @hash = data[:hash]
    @local_name = data[:local_name]
    @message = data[:message]
    @is_gone = data[:is_gone] || false
    @is_current = data[:is_current] || false

    @position = parse_position(data[:position])
    @remote = data[:remote]
    @distant_name = data[:distant_name]

    data = commit_info(@hash)
    @date = data[:date]
    @date_relative = data[:date_relative]
  end

  def parse_position(position)
    return nil if position.nila

    position.gsub('ahead ', '+').gsub('behind ', '-').to_i
  end

  def data_as_array
    display = []
    # Mark current branch
    display << @is_current ? '' : ' '

    # Marker
    display << push_pull_indicator(@local_name)

    has_different_remote = @local_name != @distant_name
    display << has_different_remote ? "#{@local_name}:#{@distant_name}" : @local_name

    display << @hash

    if Time.now.to_i - @date.to_time.to_i > 48 * 60 * 60
      display << " #{@date_relative}"
                 .gsub('weeks', 'w.')
                 .gsub('days', 'd.')
                 .gsub(' ago', '')
    else
      display << nil
    end

    display << @message

    display
  end
end

# Display the complete list of all branches
class GitBranchListAll
  include GitHelper

  def initialize(*args)
    @args = get_flag_args(args)
    @branches = branches
  end

  def branches
    output = `git branch -vv`
    branches = []
    output.each_line do |line|
      branch_data = parse_raw_branch(line)
      ap branch_data
      # branches << Branch.new(branch_data)
      
      # # Current branch is detached
      # if local_name[0] == '('
      #   local_name = 'HEAD'
      #   distant_name = 'HEAD'
      # end

    end
    branches
  end

  def run
    return
    lines = pad_two_dimensionnal_array(@branches.map(&:data_as_array))

    # Colorize output
    output = lines.map do |line|
      branch_name = line[2]
      # Current branch
      line[0] = colorize(line[0], color(:valid))
      # Marker
      line[1] = colorize(line[1], branch_color(branch_name.strip))
      # Name
      line[2] = colorize(line[2], branch_color(branch_name.strip))
      # hash
      line[3] = colorize(line[3], color(:hash))
      # date
      line[4] = colorize(line[4], color(:date))
      # message
      line[5] = colorize(line[5], color(:message))
      line.join(' ')
    end
    puts output
  end
end
GitBranchListAll.new(*ARGV).run
