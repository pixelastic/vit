#!/usr/bin/env zsh
# Display the list of local branches
# Usage:
# $ git-branch-list

# Hopefully this sign will never be used in tags or commits
local separator="〷"
local gitBranchFormat=""
gitBranchFormat+="%(refname:short)${separator}"
gitBranchFormat+="%(objectname:short)${separator}"
gitBranchFormat+="%(committerdate:relative)${separator}"
gitBranchFormat+="%(contents:subject)${separator}"

local rawGitBranches="$(git branch --format="$gitBranchFormat\n")"
local currentBranch="$(git-branch-current)"

# Loop through all the raw output, and format/color them before adding them to
# the output
local output=""
while read -r rawGitBranch; do
  # Splitting the line into its various parts
  local splitLine=$(text-split "$rawGitBranch" "$separator")
  local branchName="$(text-select-line "$splitLine" 1)"
  local commitHash="$(text-select-line "$splitLine" 2)"
  local relativeTime="$(text-select-line "$splitLine" 3)"
  local commitMessage="$(text-select-line "$splitLine" 4)"

  # Detached head branches look like "(HEAD detached at d57afca)"
  if [[ "$branchName" =~ "^\(HEAD" ]]; then
    branchName="HEAD"
  fi

  local row=""

  #  to mark the current branch {{{
  if [[ $branchName == $currentBranch ]]; then
    row+="$(colorize  green)${separator}"
  else
    row+="$separator"
  fi
  # }}}

  # Branch name {{{
  row+="$(git-branch-colorize "$branchName" --with-icon)${separator}"
  # }}}

  # TODO: Add custom remote if not same as current
  # TODO: Add ahead/behind information compared to remote

  # Commit {{{
  row+="$(git-commit-colorize "$commitHash" --with-icon)${separator}"
  # }}}

  # Date {{{
  row+="$(git-date-colorize "$relativeTime" --with-icon)${separator}"
  # }}}

  # Commit message {{{
  row+="$(git-message-colorize "$commitMessage")${separator}"
  # }}}

  output+="$row\n"
done <<<$rawGitBranches

echo $output | column --table-noheadings --separator "$separator" -t
