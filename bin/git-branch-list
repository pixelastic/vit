#!/usr/bin/env ruby
require_relative '../lib/git_helper'
require 'awesome_print'

# Branch representation
class Branch
  include GitHelper
  def initialize(data)
    @hash = data[:hash]
    @local_name = data[:local_name]
    @message = data[:message]
    @is_gone = data[:is_gone] || false

    @position = parse_position(data[:position])
    @remote = data[:remote]
    @distant_name = data[:distant_name]
  end

  def parse_position(position)
    return nil if position.nil?
    position.gsub('ahead ', '+').gsub('behind ', '-').to_i
  end

  def current?
    current_branch == @local_name
  end

  def data_as_array
    display = []
    # Mark current branch
    if current?
      display << ''
    else
      display << ' '
    end

    # Marker
    if @is_gone
      display << 'x'
    else
      display << push_pull_indicator(@local_name)
    end


    if @local_name == @distant_name
      display << @local_name
    else
      display << "#{@local_name}:#{@distant_name}"
    end

    display << @hash
    display << @message

    display
  end
end

# Display the complete list of all branches
class GitBranchListAll
  include GitHelper

  def initialize(*args)
    @args = get_flag_args(args)
    @is_displaying_gone_branches = @args.include?('-a')
    @remote_branches = remote_branches if @is_displaying_gone_branches
    @local_branches = local_branches
  end

  def local_branches
    output = `git branch -vv`
    current_remote = current_remote()
    branches = []
    output.each_line do |line|
      local_name, hash, message = line.match(/^.{2}([^ ]*) *([^ ]*) (.*)$/).captures
      # If nothing is specified, it points to current remote and on a branch
      # with the same name
      distant_name = local_name
      remote = current_remote

      # message contains distant branch and ahead/behind information
      if message[0] == '['
        distant_name, _, position, message = message.match(/^\[([^ :]*)(: )?(.*)\] (.*)/).captures
        is_branch_gone = (position == 'gone')
        split = distant_name.split('/')
        remote = split.shift
        distant_name = split.join('/')
      end

      branches << Branch.new(
        local_name: local_name,
        distant_name: distant_name,
        remote: remote,
        is_gone: is_branch_gone,
        hash: hash,
        position: position,
        message: message
      )
    end
    branches
  end

  def remote_branches
    commands = [
      'git ls-remote --heads 2>/dev/null',
      "awk '{print $2}'",
      "sed 's_refs/heads/__'"
    ]
    `#{commands.join(' | ')}`.split("\n")
  end

  def run
    lines = pad_two_dimensionnal_array(@local_branches.map(&:data_as_array))

    # Colorize output
    output = lines.map do |line|
      branch_name = line[2]
      marker = line[1]
      # Current branch
      line[0] = colorize(line[0], color(:valid))
      # Marker
      if marker.strip == 'x' # Hackish way to know the branch is gone
        line[1] = colorize(marker.gsub('x', ''), color(:branch_gone))
      else
        line[1] = colorize(line[1], branch_color(branch_name.strip))
      end

      # Name
      line[2] = colorize(line[2], branch_color(branch_name.strip))
      # hash
      line[3] = colorize(line[3], color(:hash))
      # message
      line[4] = colorize(line[4], color(:message))
      line.join(' ')
    end
    puts output
  end
end
GitBranchListAll.new(*ARGV).run
