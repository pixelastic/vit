#!/usr/bin/env ruby
require 'shellwords'
require_relative '../lib/git_helper'
# Create a pull request from the current branch
# Usage:
# $ git-pullrequest-create
# $ git-pullrequest-create {remote}
# $ git-pullrequest-create {branch}
# $ git-pullrequest-create {remote} {branch}
# $ git-pullrequest-create {branch} {remote}
class GitPullRequestCreate
  include GitHelper
  def initialize(*args)
    args = replace_short_aliases(args)
    default_owner = remote_owner(current_remote)

    # No arguments given, we create it on same owner, under develop
    if args.empty?
      @owner = default_owner
      @branch = target_branch
      return
    end

    # One argument, and it's a remote
    if args.size == 1
      if remote?(args[0])
        @owner = remote_owner(args[0])
        @branch = target_branch
        return
      end
      @owner = default_owner
      @branch = args[0]
      return
    end

    # Two args, we need to find which is the remote and which is the branch
    if args.size == 2
      if remote?(args[0])
        @owner = remote_owner(args[0])
        @branch = args[1]
        return
      end
      @owner = remote_owner(args[1])
      @branch = args[0]
    end
  end

  def target_branch
    # If no branch specified, we use develop or master
    branch?('develop') ? 'develop' : 'master'
  end

  # Gets the full description (commit messages) since branch creation
  def description
    # If the origin is closer than the local version, we use it
    branch_origin = "#{current_remote}/#{@branch}"
    closer_branch = `git-commit-closer #{@branch} #{branch_origin}`.strip
    `git log --pretty=format:'%b' #{closer_branch}...`.strip
  end

  def set_upstream
    remote_branch = "#{current_remote}/#{current_branch}"
    command = "git branch -u #{remote_branch}"
    `#{command}`
  end

  def run
    # Then create the PR
    options = [
      "--submit #{@owner}",
      "--branch #{@branch}",
      "--description #{description.shellescape}"
    ]
    command = "gh pr #{options.join(' ')}"
    `#{command}`

    # Set the upstream, so we know this is pushed
    set_upstream
  end
end
GitPullRequestCreate.new(*ARGV).run
