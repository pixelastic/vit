#!/usr/bin/env ruby
require_relative '../lib/git_helper'

# Creates a new repository, and plug it to github by default
# Usage :
# $ git-directory-create
# $ git-directory-create ./path/to/repo
# $ git-directory-create ./path/to/repo url@to:repo.git
# $ git-directory-create url@to:repo.git ./path/to/repo
# Options:
#   By default it will create a repo on GitHub and set it as the remote
#  -n : Do not add any remote
#  -b : Set the remote to BitBucket
#  -a : Create the remote under the Algolia namespace
class GitDirectoryCreate
  include GitHelper
  def initialize(*args)
    elements = guess_elements(args)

    # Use specified path (if guessed) or unknown element. Fallback to current
    # directory
    @path = elements[:path]
    @path = elements[:unknown][0] if @path.nil?
    @path = '.' if @path.nil?
    @path = File.expand_path(@path)

    # Name of the repo is dirname by default
    @name = File.dirname(@path)

    # Set remote type
    @remote_type = :github
    @remote_type = :algolia if elements[:arguments].include?('-a')
    @remote_type = :bitbucket if elements[:arguments].include?('-b')
    @remote_type = :none if elements[:arguments].include?('-n')
  end

  def add_default_files
    # Add .gitignore
    gitignore_path = File.join(@path, '.gitignore')
    unless File.exist?(gitignore_path)
      default_gitignore = File.expand_path('~/.oroshi/config/git/gitignore')
      FileUtils.cp(default_gitignore, gitignore_path)
    end

    # Add readme
    readme_path = File.join(@path, 'README.md')
    unless File.exist?(readme_path)
      File.open(readme_path, 'w') do |file|
        file.write("# #{@name}")
      end
    end

    stage_all
    create_commit('Add .gitignore and README.md')
  end

  def set_remote
    return if @remote_type == :none

    url = "git@github.com:pixelastic/#{@name}.git" if @remote_type == :github
    url = "git@github.com:algolia/#{@name}.git" if @remote_type == :algolia
    url = "git@bitbucket.org:pixelastic/#{@name}.git" if @remote_type == :bitbucket

    set_remote_url('origin', url)

    # set_remote_url(origin, url)
    #
    # if github
    # create gh repo
  #   `gh repo -N #{@name} &>/dev/null`

    create_remote(

  #   # Add remote
  #   if system("git remote set-url origin git@github.com:pixelastic/#{@name}")
  #     # set-url does not seem to set the fetch value, so we manually put it
  #     fetch_value = '+refs/heads/*:refs/remotes/origin/*'
  #     `git config --add remote.origin.fetch '#{fetch_value}'`

  #     puts '✔ Remote origin set to GitHub'
  #   else
  #     puts '✘ Unable to set remote to GitHub'
  #     exit
  #   end

  end

  def run
    if repository?(@path)
      puts "✘ Aborting, #{@path} is already a git repo"
      exit 1
    end

    create_repo(@path)
    Dir.chdir(@path)
    add_default_files

    set_remote if @remote_type != :none
  end
    
    # Stop if -n
    
    # Create GH repo if GH
    # pixelastic or algolia

    # Define remote name
    # Add remote

    # Push
    # Suggest BitBucket URL if failed


  # def create_remote
  #   return if @is_dry_run
  #   return unless @remote == :github
  #   # Create github repo
  #   `gh repo -N #{@name} &>/dev/null`
  #   puts '✔ Repository created'

  #   # Add remote
  #   if system("git remote set-url origin git@github.com:pixelastic/#{@name}")
  #     # set-url does not seem to set the fetch value, so we manually put it
  #     fetch_value = '+refs/heads/*:refs/remotes/origin/*'
  #     `git config --add remote.origin.fetch '#{fetch_value}'`

  #     puts '✔ Remote origin set to GitHub'
  #   else
  #     puts '✘ Unable to set remote to GitHub'
  #     exit
  #   end
  # end

  # def push
  #   return if @is_dry_run
  #   if system('git push --set-upstream origin master &>/dev/null')
  #     puts '✔ Pushed'
  #   else
  #     puts '✘ Unable to push'
  #     exit 1
  #   end
  # end

  # def run
  #   cd_to_repo
  #   init_repo
  #   add_default_files
  #   create_remote
  #   push

  # end
end
GitDirectoryCreate.new(*ARGV).run
