#!/usr/bin/env ruby
require_relative '../etc/git-helper/git_helper'
# Display the list of current local tags
# Usage :
# $ git-tag-list
# v1.1.2  9242a33  Version 1.1.2
# v1.1.3  7548e9a  Version 1.1.3
# v1.1.4  87967bb  Version 1.1.4

Tag = Struct.new(:name, :hash, :message)
class TagList
  include GitHelper
  # Note:
  # Git provides two commands to get the list of tags.
  # One will give us the list of tags, with commit hashes
  # The other one will give us the list of tags, with commit message
  # We'll have to reconciliate both before displaying them

  def initialize(*args)
    @currentTags = current_tags
    @tagList = tag_list
  end

  def tag_list
    hashes = tags_with_hashes
    messages = tags_with_messages
    list = []
    messages.each do |name, message|
      list << Tag.new(name, hashes[name], message)
    end
    return list
  end

  def tags_with_messages
    output = %x[git tag -n | sort -V]
    tags = {}
    output.each_line do |line|
      name, message = line.match(/(^[^ ]*)\s*(.*)$/).captures
      tags[name] = message
    end
    return tags
  end

  def tags_with_hashes
    output = %x[git show-ref --tags]
    tags = {}
    output.each_line do |line|
      hash, name = line.match(/^(.{7})[^ ]* refs\/tags\/(.*)$/).captures
      tags[name] = hash
    end
    return tags
  end

  def output_current_tag(tag)
    return colorize("î€¾", color(:valid)) if @currentTags.include? tag
    return " "
  end

  def run
    longest_tag = longest_by_type(@tagList, :name)

    @tagList.each do |tag|
      current_tag = output_current_tag(tag[:name])
      tag_name = colorize(tag[:name].ljust(longest_tag.size), color(:tag))
      hash = colorize(tag[:hash], color(:hash))
      message = colorize(tag[:message], color(:message))
      puts "#{current_tag}  #{tag_name}  #{hash}  #{message}"
    end
  end
end
TagList.new().run()
