#!/usr/bin/env ruby
require_relative '../lib/git_helper'

# Wrapper for pulling from remote
# Usage :
# $ git-branch-pull
# $ git-branch-pull upstream {current_branch}
# $ git-branch-pull {origin} develop
# $ git-branch-pull upstream develop
# $ git-branch-pull develop upstream
# $ git-branch-pull username:branch (on GitHub)
class GitBranchPull
  include GitHelper

  def initialize(*args)
    @flags = get_flag_args(args)
    @args = get_real_args(args)

    # Make sure we'll always rebase when pulling
    @flags << '--rebase'

    elements = guess_elements(@args)
    @remote_name = elements[:remote]
    @branch_name = elements[:unknown][0] || elements[:branch]

    # Trying to pull a branch from another user on github
    use_branch_as_github_fork(@branch_name) if @branch_name[':']
  end

  # Reads username:branchname string and create necessary remote
  def use_branch_as_github_fork(github_fork)
    username, @branch_name = github_fork.split(':')

    @remote_name = username

    # Create remote for user
    unless remote?(@remote_name)
      current_remote_url = remote_url
      repo_name = current_remote_url.split('/')[1]
      remote_url = "git@github.com:#{username}/#{repo_name}"
      system("git-remote-create #{@remote_name} #{remote_url}")
    end
  end

  def pull_unknown_branch
    system("git fetch #{@remote_name} #{@branch_name}:#{@branch_name}")
    system("git checkout #{@branch_name}")
  end

  def pull_known_branch
    system("git pull #{@flags.join(' ')} #{@remote_name} #{@branch_name}")
    system("git fetch --tags #{@remote_name}")
    system('git submodule update')
  end

  def run
    old_commit = current_commit
    if branch?(@branch_name)
      pull_known_branch
    else
      pull_unknown_branch
    end
    update_dependencies(old_commit)
  end
end
GitBranchPull.new(*ARGV).run
