#!/usr/bin/env zsh
# Display the list of remote branches
# Usage:
# $ git-branch-list-remote origin   # List all remote branches on origin
# $ git-branch-list-remote          # List all remote branches on all remote

# Init values {{{
local separator="〷"
local output=""
local currentRemoteBranch="$(git-remote-current)/$(git-remote-branch)"
# }}}

# Gathering local branch information {{{
# Before we loop through all the remote branches, we'll gather all information
# about the local branches
local gitLocalBranchFormat=""
gitLocalBranchFormat+="_%(upstream:remotename)${separator}"     # origin
gitLocalBranchFormat+="_%(upstream:remoteref)${separator}"      # refs/heads/master
gitLocalBranchFormat+="_%(refname:short)${separator}"           # master
gitLocalBranchFormat+="_%(upstream:track)${separator}"          # [ahead 4]

# Looping through all local branches to build a list of:
# remoteBranchName <=> localBranchName
# remoteBranchName <=> remoteDistance
local -A localBranchesNames; localBranchesNames=()
local -A remoteDistances; remoteDistances=()
local rawLocalBranches="$(git branch --format="$gitLocalBranchFormat\n")"
while read -r rawLocalBranch; do
  # Extracting relevant data {{{
  local splitRawLocalBranch=(${(@s:〷:)rawLocalBranch})

  local remoteBranchName="${splitRawLocalBranch[1]:1}/${splitRawLocalBranch[2]:12}"
  local localBranchName="${splitRawLocalBranch[3]:1}"
  local remoteDistance="${splitRawLocalBranch[4]:1}"
  # }}}

  localBranchesNames[$remoteBranchName]="$localBranchName"
  remoteDistances[$remoteBranchName]="$remoteDistance"
done <<<$rawLocalBranches
# }}}

# Display all remote branches {{{
local gitRemoteBranchFormat=""
gitRemoteBranchFormat+="_%(refname:short)${separator}"           # master
gitRemoteBranchFormat+="_%(objectname:short)${separator}"        # abcdef
gitRemoteBranchFormat+="_%(committerdate:relative)${separator}"  # 3 months ago
gitRemoteBranchFormat+="_%(contents:subject)${separator}"        # fix typo

# Looping through all remote branches
local rawRemoteBranches="$(git branch --sort=-committerdate --remote --format="$gitRemoteBranchFormat\n")"
while read -r rawRemoteBranch; do
  # Extracting relevant data {{{
  local splitRawRemoteBranch=(${(@s:〷:)rawRemoteBranch})

  local remoteBranchName="${splitRawRemoteBranch[1]:1}"
  [[ "$remoteBranchName" =~ "/HEAD$" ]] && continue

  local commitHash="${splitRawRemoteBranch[2]:1}"
  local relativeTime="${splitRawRemoteBranch[3]:1}"
  local commitMessage="${splitRawRemoteBranch[4]:1}"

  local localBranchName=$localBranchesNames[$remoteBranchName]
  local remoteDistance=$remoteDistances[$remoteBranchName]
  # }}}

  # Building the row display {{{
  local row=""
  # Currently tracked branch {{{
  if [[ "$remoteBranchName" == "$currentRemoteBranch" ]]; then
    row+="$(colorize  green)${separator}"
  else
    row+="$separator"
  fi
  # Remote branch name {{{
  row+="$(git-remote-colorize "$remoteBranchName" --with-icon)${separator}"
  # }}}
  # Commit hash {{{
  row+="$(git-commit-colorize "$commitHash" --with-icon)${separator}"
  # }}}
  # Ahead/behind {{{
  row+="$(git-distance-colorize "$remoteDistance" --with-icon)${separator}"
  # }}}
  # Local branch name {{{
  if [[ "$localBranchName" != "" ]]; then
    row+="$(git-branch-colorize "$localBranchName" --with-icon)${separator}"
  else
    row+="$(colorize "untracked" gray8)${separator}"
  fi
  # }}}
  # Date {{{
  row+="$(git-date-colorize "$relativeTime" --with-icon)${separator}"
  # }}}
  # Commit message {{{
  row+="$(git-message-colorize "$commitMessage")${separator}"
  # }}}
  # }}}

  output+="$row\n"
done <<<$rawRemoteBranches

echo $output | column --table-noheadings --separator "$separator" -t
# }}}
