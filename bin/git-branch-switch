#!/usr/bin/env zsh
# Switch to the specified branches, stop when one exists
# Usage :
# $ git-branch-switch master
# $ git-branch-switch master main

for branchName in $argv; do
  # Skip non-existing branches
  if ! git-branch-exists $branchName; then
    continue
  fi

  local previousCommit="$(git-commit-current)"

  # Switch to the branch
  git checkout --quiet $branchName

  git-dependencies-update $previousCommit

  break
done

#class GitBranchSwitch
#  include GitHelper

#  def initialize(*args)
#    args = replace_short_aliases(args)
#    @branches = args
#  end

#  def run
#    old_commit = current_commit

#    # Keep only the first existing branch
#    branch_name = @branches.find { |branch| branch?(branch) }

#    exit 1 if branch_name.empty?

#    system("git checkout #{branch_name}")

#    update_dependencies(old_commit)
#  end
#end
#GitBranchSwitch.new(*ARGV).run
